<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="
           http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-3.1.xsd
           http://www.springframework.org/schema/mvc
           http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd">

    <!--<mvc:annotation-driven/>-->
    <mvc:annotation-driven>
        <mvc:message-converters>
            <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                <!--<property name="objectMapper">-->
                    <!--<bean class="com.fasterxml.jackson.databind.ObjectMapper">-->
                        <!--&lt;!&ndash; 处理responseBody 里面日期类型 &ndash;&gt;-->
                        <!--<property name="dateFormat">-->
                            <!--<bean class="java.text.SimpleDateFormat">-->
                                <!--<constructor-arg type="java.lang.String" value="yyyy-MM-dd HH:mm:ss" />-->
                            <!--</bean>-->
                        <!--</property>-->
                        <!--&lt;!&ndash; 为null字段时不显示 &ndash;&gt;-->
                        <!--<property name="serializationInclusion">-->
                            <!--<value type="com.fasterxml.jackson.annotation.JsonInclude.Include">NON_NULL</value>-->
                        <!--</property>-->
                    <!--</bean>-->
                <!--</property>-->
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>
    <context:component-scan base-package="com.dz.kaiying.controller.activiti,org.activiti.rest,com.dz.kaiying.taskListener">
        <context:include-filter type="annotation"
                                expression="org.springframework.stereotype.Controller" />
    </context:component-scan>


    <bean id="stringHttpMessageConverter"
          class="org.springframework.http.converter.StringHttpMessageConverter">
        <constructor-arg index="0" value="UTF-8" />
    </bean>
    <bean id="ObjectMapper"
          class="com.fasterxml.jackson.databind.ObjectMapper">
    </bean>
    <!-- 上传文件拦截，设置最大上传文件大小 10M=10*1024*1024(B)=10485760 bytes -->
    <bean id="multipartResolver"
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize" value="10485760" />
        <!-- resolveLazily属性启用是为了推迟文件解析，以便在Action 中捕获文件大小异常 -->
        <property name="resolveLazily" value="true" />
        <property name="defaultEncoding" value="UTF-8" />
    </bean>

    <!-- 约定优于配置，约定优于配置 -->
    <!--<mvc:resources mapping="/favicon.ico" location="/WEB-INF/favicon.ico" />-->
    <!--<mvc:resources mapping="/upload/**" location="/upload/"/>-->
    <mvc:resources mapping="/js/**" location="/js/"/>
    <mvc:resources mapping="/css/**" location="/css/"/>
    <mvc:resources mapping="/processes/**" location="/processes/"/>
    <!--<mvc:resources mapping="/images/**" location="/WEB-INF/images/"/>-->
    <!--<mvc:resources mapping="/static/**" location="/WEB-INF/static/"/>-->

    <!--<mvc:interceptors>-->
        <!--<mvc:interceptor>-->
            <!--<mvc:mapping path="/d2/**" />-->
            <!--<bean class="com.medicineCenter.infrastructure.interceptor.D2Interceptor"></bean>-->
        <!--</mvc:interceptor>-->
        <!--<mvc:interceptor>-->
            <!--<mvc:mapping path="/d3/**" />-->
            <!--<bean class="com.medicineCenter.infrastructure.interceptor.D3Interceptor"></bean>-->
        <!--</mvc:interceptor>-->
        <!--<mvc:interceptor>-->
            <!--<mvc:mapping path="/dq/**" />-->
            <!--<bean class="com.medicineCenter.infrastructure.interceptor.DqInterceptor"></bean>-->
        <!--</mvc:interceptor>-->
        <!--<mvc:interceptor>-->
            <!--<mvc:mapping path="/admin/**" />-->
            <!--<bean class="com.medicineCenter.infrastructure.interceptor.AdminInterceptor"></bean>-->
        <!--</mvc:interceptor>-->
        <!--<mvc:interceptor>-->
            <!--<mvc:mapping path="/tasklog/**" />-->
            <!--<bean class="com.medicineCenter.infrastructure.interceptor.LoginInterceptor"></bean>-->
        <!--</mvc:interceptor>-->
    <!--&lt;!&ndash; 当设置多个拦截器时，先按顺序调用preHandle方法，然后逆序调用每个拦截器的postHandle和afterCompletion方法 &ndash;&gt;-->
    <!--</mv`c:interceptors>-->


    <context:component-scan base-package="com.dz.kaiying.controller">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/views/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <bean
            class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping">
    </bean>


    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
        <property name="messageConverters">
            <list >
                <ref bean="mappingJacksonHttpMessageConverter" />
            </list>
        </property>
    </bean>
    <bean id="mappingJacksonHttpMessageConverter"
          class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>text/html;charset=UTF-8</value>
                <value>application/json;charset=UTF-8</value>
            </list>
        </property>
    </bean>

    <!-- 全局异常配置 start -->
    <bean id="exceptionResolver"
          class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <!-- 异常处理 -->
        <property name="exceptionMappings">
            <props>
                <prop key="java.lang.Exception">errors/err</prop>
                <prop key="java.lang.Throwable">errors/err</prop>
            </props>
        </property>
        <!-- 状态码处理 -->
        <property name="statusCodes">
            <props>
                <prop key="errors/500">500</prop>
                <prop key="errors/404">404</prop>
                <prop key="errors/405">405</prop>
                <prop key="errors/403">403</prop>
            </props>
        </property>
        <!-- 设置日志输出级别，不定义则默认不输出警告等错误日志信息 -->
        <property name="warnLogCategory" value="WARN"/>
        <!-- 默认错误页面，当找不到上面mappings中指定的异常对应视图时，使用本默认配置 -->
        <property name="defaultErrorView" value="errors/404"/>
        <!-- 默认HTTP状态码 -->
        <property name="defaultStatusCode" value="500"/>
    </bean>
    <mvc:annotation-driven />
    <!-- 全局异常配置 end -->
</beans>